//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан инструментальным средством
//     В случае повторного создания кода изменения, внесенные в этот файл, будут потеряны.
// </auto-generated>
//------------------------------------------------------------------------------
namespace GeneralPackage.GameData
{
	using System;
	using System.Collections.Generic;
	using System.Linq;
	using System.Text;
    using GeneralPackage.Structures;

	public class AgentList
	{
        private Dictionary<int,Agent> list = new Dictionary<int,Agent>();

        #region indexator

        int lastCandidate = 1;
        private int getNewIndex()
        {
            for (int i = lastCandidate; i < int.MaxValue; i++)
            {
                if (!list.ContainsKey(i))
                {
                    lastCandidate = i + 1;
                    return i;
                }
            }
            throw new Exception("AgentList is full and contains " + list.Count.ToString() + " elements.");
        }

        #endregion

        void deleteAgent(int id)
        {
            if (list.ContainsKey(id))
            {
                list[id].deleted();
                list.Remove(id);
                lastCandidate = Math.Min(lastCandidate,id);
            }
        }

        #region stepByStep Model

        #region stackDelete

        private List<int> toDelete = new List<int>();

        void deleteAfter(int id)
        {
            toDelete.Add(id);
        }

        void completeDelete()
        {
            foreach (int id in toDelete)
            {
                deleteAgent(id);
                toDelete.Remove(id);
            }
        }
        #endregion

        public void launchAgents()
        {
            foreach (Agent ag in list.Values)
            {
                ag.Eventer.makeTurn();
            }
            completeDelete();
        }

        public IReadOnlyDictionary<int, Agent> getDictionary()
        {
            return list;
        }

        

        internal Agent this[int i]
        {
            get { return list[i]; }
        }

        #endregion

        #region adding Agents

        public int addCustomAgent(Coord startCoord, Eventer eventHandler,
                                    double speed, double viewRadius)
        {
            int i = getNewIndex();
            list.Add(i, new Agent(eventHandler, i, speed, viewRadius, startCoord));
            return i;
        }

        public void addTestAgent()
        {
            int i = getNewIndex();
            list.Add(i, new Agent(new Eventer(), i, 0.0, 0.1, Coord.rand()));
        }

        #endregion
    }
}

